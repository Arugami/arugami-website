---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

const pageTitle = 'Local Visibility Grader — Free Restaurant Audit';
const description = 'Run a 60-second local visibility audit for your restaurant. See Google profile gaps, review momentum, and website fixes before you talk to a sales rep.';

// Cache busting deployment - September 24, 2025
const apiBase = import.meta.env.PUBLIC_API_BASE ?? 'https://arugami-website-production.up.railway.app';
const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY ?? '';
const disableVerification = (import.meta.env.PUBLIC_DISABLE_VERIFICATION ?? 'true') === 'true';
const configJson = JSON.stringify({ apiBase, recaptchaSiteKey, disableVerification });
---

<BaseLayout title={pageTitle} description={description}>
  <Header />
  <main class="bg-slate-950 text-white py-16">
    <section class="max-w-6xl mx-auto px-6">
      <div class="grid gap-12 lg:grid-cols-[1.1fr_0.9fr] items-start">
        <div class="space-y-6">
          <span class="inline-flex items-center gap-2 rounded-full bg-pink-500/10 px-4 py-2 text-sm font-semibold text-pink-300">
            <span class="inline-block h-2 w-2 rounded-full bg-pink-400"></span>
            Local Visibility Grader
          </span>
          <h1 class="text-4xl font-semibold tracking-tight text-white sm:text-5xl">
            Grade your local presence before the dinner rush hits.
          </h1>
          <p class="text-lg text-slate-300">
            Drop your restaurant name and we scan your Google Business Profile, top competitors, reviews, and mobile performance. In under two minutes you get a playbook—with the dollar impact—to fix what is costing you tables.
          </p>
          <ul class="grid gap-3 text-sm text-slate-300 sm:grid-cols-2">
            <li class="flex items-start gap-3">
              <span class="mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-pink-500/20 text-xs font-bold text-pink-200">1</span>
              <span>We pull your Google profile, photos, reviews, and map rankings.</span>
            </li>
            <li class="flex items-start gap-3">
              <span class="mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-pink-500/20 text-xs font-bold text-pink-200">2</span>
              <span>We stress test your website on mobile and map the fastest local competitors.</span>
            </li>
            <li class="flex items-start gap-3">
              <span class="mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-pink-500/20 text-xs font-bold text-pink-200">3</span>
              <span>You verify with your phone number to unlock the 0–100 score and ROI breakdown.</span>
            </li>
            <li class="flex items-start gap-3">
              <span class="mt-1 flex h-6 w-6 items-center justify-center rounded-full bg-pink-500/20 text-xs font-bold text-pink-200">4</span>
              <span>See the top fixes, expected revenue, and book a call when you are ready.</span>
            </li>
          </ul>
          <div class="rounded-2xl border border-white/10 bg-white/5 p-6 text-sm text-slate-200">
            <p class="font-semibold text-white">What we scan right now</p>
            <p class="mt-2 text-slate-300">
              Google Business Profile completeness, reviews, photos, website conversion paths, and mobile performance. SERP ranking and competitor animations land in Sprint 2.
            </p>
          </div>
        </div>

        <div class="rounded-2xl border border-white/10 bg-white/5 shadow-xl" id="grader-card">
          <div class="p-6" id="grader-form-container">
            <form id="grader-form" class="space-y-6">
              <div class="space-y-3">
                <label class="block text-sm font-semibold text-white" for="businessName">What’s your restaurant called? *</label>
                <div>
                  <div class="relative">
                    <input
                      id="businessName"
                      name="businessName"
                      type="text"
                      required
                      autocomplete="off"
                      placeholder="eg. Ani Ramen Jersey City"
                      class="w-full rounded-xl border border-white/10 bg-slate-900/80 px-5 py-4 pr-12 text-white placeholder:text-slate-400 focus:border-pink-400 focus:outline-none focus:ring-2 focus:ring-pink-300/50 focus:bg-slate-900 transition-all duration-200 text-base"
                    />
                    <div id="search-spinner" class="absolute right-3 top-1/2 -translate-y-1/2 hidden">
                      <svg class="h-5 w-5 animate-spin text-pink-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    </div>
                  </div>
                <div id="search-suggestions" class="mt-3 hidden overflow-hidden rounded-xl border border-white/10 bg-slate-900/95 shadow-2xl backdrop-blur animate-in fade-in slide-in-from-top-2 duration-200">
                  <div class="flex items-center justify-between border-b border-white/5 px-4 py-3">
                    <div class="flex items-center gap-3">
                      <p class="text-xs font-medium text-slate-300">Restaurant matches</p>
                      <a href="https://maps.google.com" target="_blank" rel="noopener" class="opacity-60 transition hover:opacity-100" aria-label="Powered by Google">
                        <img src="https://developers.google.com/maps/documentation/images/powered_by_google_on_white.png" alt="Powered by Google" class="h-3" />
                      </a>
                    </div>
                    <span id="suggestion-status" class="rounded-full border border-slate-400/30 bg-slate-500/10 px-3 py-1 text-xs font-medium text-slate-200 transition-all duration-200">Type to search</span>
                  </div>
                  <ul id="search-suggestion-list" role="listbox" class="max-h-80 overflow-y-auto px-2 py-2"></ul>
                  <div class="flex flex-wrap items-center justify-between gap-2 border-t border-white/5 px-4 py-3 text-xs text-slate-400">
                    <span id="suggestion-hint">Start typing to find your exact listing.</span>
                  </div>
                </div>

                <ul class="grid gap-2 rounded-xl border border-white/10 bg-slate-900/70 p-4 text-xs text-slate-300 sm:grid-cols-3">
                  <li class="flex items-center gap-2"><span class="inline-flex h-2 w-2 rounded-full bg-pink-400"></span>Live GBP screenshots</li>
                  <li class="flex items-center gap-2"><span class="inline-flex h-2 w-2 rounded-full bg-pink-400"></span>Hudson competitor map</li>
                  <li class="flex items-center gap-2"><span class="inline-flex h-2 w-2 rounded-full bg-pink-400"></span>Fix-it playbook in 2 minutes</li>
                </ul>
              </div>


              <input type="hidden" name="placeId" id="placeId" />

              <button type="submit" class="w-full rounded-lg bg-pink-500 px-4 py-3 text-sm font-semibold uppercase tracking-[0.2em] text-white transition hover:bg-pink-400 focus:outline-none focus:ring-2 focus:ring-pink-300">Run my free audit</button>
              <p class="hidden text-xs text-amber-300" id="grader-warning"></p>
            </form>

            <!-- Scanning View: Map-first with left sticky rail -->
            <div id="grader-progress" class="hidden">
              <!-- Top search bar (persistent) -->
              <div class="mb-6 flex items-center justify-center">
                <div class="flex items-center gap-3 rounded-full border border-white/10 bg-slate-900/80 px-6 py-3 backdrop-blur">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-pink-400">
                    <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
                  </svg>
                  <span id="scanning-query" class="text-sm font-medium text-white">Scanning your restaurant...</span>
                </div>
              </div>

              <!-- Main scanning layout -->
              <div class="flex gap-6">
                <!-- Left sticky rail -->
                <div class="w-80 flex-shrink-0">
                  <div class="sticky top-6 space-y-4">
                    <!-- Scanning header -->
                    <div class="rounded-2xl border border-white/10 bg-slate-900/80 p-5">
                      <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-white">Scanning...</h3>
                        <div class="flex items-center gap-2 text-xs text-slate-400">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-3 w-3">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm.75-13a.75.75 0 00-1.5 0v5c0 .414.336.75.75.75h4a.75.75 0 000-1.5h-3.25V5z" clip-rule="evenodd" />
                          </svg>
                          <span id="scan-timer">~30 seconds remaining</span>
                        </div>
                      </div>
                    </div>

                    <!-- Progress steps -->
                    <div class="space-y-3" aria-live="polite" id="progress-steps">
                      <div data-step="resolving" class="flex items-center gap-3 rounded-xl border border-white/10 bg-slate-900/70 px-4 py-3">
                        <div class="flex h-6 w-6 items-center justify-center">
                          <span class="h-2 w-2 rounded-full bg-slate-500 transition-colors duration-200"></span>
                        </div>
                        <div class="flex-1">
                          <p class="text-sm font-medium text-white">Who/Name & competitors</p>
                        </div>
                      </div>
                      <div data-step="details" class="flex items-center gap-3 rounded-xl border border-white/10 bg-slate-900/70 px-4 py-3">
                        <div class="flex h-6 w-6 items-center justify-center">
                          <span class="h-2 w-2 rounded-full bg-slate-500 transition-colors duration-200"></span>
                        </div>
                        <div class="flex-1">
                          <p class="text-sm font-medium text-white">Google Business profile</p>
                        </div>
                      </div>
                      <div data-step="competitors" class="flex items-center gap-3 rounded-xl border border-white/10 bg-slate-900/70 px-4 py-3">
                        <div class="flex h-6 w-6 items-center justify-center">
                          <span class="h-2 w-2 rounded-full bg-slate-500 transition-colors duration-200"></span>
                        </div>
                        <div class="flex-1">
                          <p class="text-sm font-medium text-white">Web conversion path</p>
                        </div>
                      </div>
                      <div data-step="performance" class="flex items-center gap-3 rounded-xl border border-white/10 bg-slate-900/70 px-4 py-3">
                        <div class="flex h-6 w-6 items-center justify-center">
                          <span class="h-2 w-2 rounded-full bg-slate-500 transition-colors duration-200"></span>
                        </div>
                        <div class="flex-1">
                          <p class="text-sm font-medium text-white">Photo quality and quantity</p>
                        </div>
                      </div>
                      <div data-step="scoring" class="flex items-center gap-3 rounded-xl border border-white/10 bg-slate-900/70 px-4 py-3">
                        <div class="flex h-6 w-6 items-center justify-center">
                          <span class="h-2 w-2 rounded-full bg-slate-500 transition-colors duration-200"></span>
                        </div>
                        <div class="flex-1">
                          <p class="text-sm font-medium text-white">Mobile experience</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Map canvas -->
                <div class="flex-1">
                  <div class="rounded-2xl border border-white/10 bg-slate-900/50 overflow-hidden">
                    <div id="scanning-map" class="relative h-[500px] bg-gradient-to-br from-slate-800 to-slate-900">
                      <!-- Map placeholder with competitor pins -->
                      <div class="absolute inset-0 flex items-center justify-center">
                        <div class="text-center">
                          <div class="mx-auto mb-4 h-12 w-12 rounded-full bg-pink-500/20 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-6 w-6 text-pink-400">
                              <path fill-rule="evenodd" d="M9.69 18.933l.003.001C9.89 19.02 10 19 10 19s.11.02.308-.066l.002-.001.006-.003.018-.008a5.741 5.741 0 00.281-.14c.186-.096.446-.24.757-.433.62-.384 1.445-.966 2.274-1.765C15.302 14.988 17 12.493 17 9A7 7 0 103 9c0 3.492 1.698 5.988 3.646 7.584.829.8 1.654 1.381 2.274 1.765a11.25 11.25 0 00.757.433 5.708 5.708 0 00.281.14l.018.008.006.003zM10 11.25a2.25 2.25 0 100-4.5 2.25 2.25 0 000 4.5z" clip-rule="evenodd" />
                            </svg>
                          </div>
                          <p class="text-sm text-slate-400">Loading Hudson County map...</p>
                        </div>
                      </div>
                      
                      <!-- Competitor pins will be added dynamically -->
                      <div id="competitor-pins" class="absolute inset-0"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Unlock Modal (mid-scan gate) -->
            <div id="unlock-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-slate-950/80 backdrop-blur-sm">
              <div class="relative mx-4 max-w-md rounded-2xl border border-white/10 bg-slate-900/95 p-6 shadow-2xl backdrop-blur">
                <div class="text-center">
                  <div class="mx-auto mb-4 h-16 w-16 rounded-full bg-pink-500/20 flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-8 w-8 text-pink-400">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <h3 class="text-xl font-semibold text-white mb-2">Unlock your free report</h3>
                  <p class="text-sm text-slate-300 mb-6">Your scan is complete! Verify your phone to unlock the full Hudson County visibility report and dollar impact analysis.</p>
                  
                  <!-- reCAPTCHA placeholder -->
                  <div class="mb-4 flex items-center justify-center">
                    <div class="rounded border border-white/10 bg-slate-800/50 px-4 py-3 text-xs text-slate-400">
                      <label class="flex items-center gap-2 cursor-pointer">
                        <input type="checkbox" id="unlock-recaptcha" class="rounded border-white/20 bg-slate-700 text-pink-500 focus:ring-pink-400">
                        <span>I'm not a robot</span>
                      </label>
                    </div>
                  </div>
                  
                  <button id="unlock-continue" class="w-full rounded-lg bg-pink-500 px-4 py-3 text-sm font-semibold uppercase tracking-[0.2em] text-white transition hover:bg-pink-400 focus:outline-none focus:ring-2 focus:ring-pink-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    Continue to verification
                  </button>
                  
                  <p class="mt-4 text-xs text-slate-500">We only use this to prevent spam and ensure you get your personalized Hudson County report.</p>
                </div>
              </div>
            </div>

            <div id="grader-verify" class="hidden space-y-4">
              <div class="rounded-xl bg-slate-900/70 p-4">
                <p class="text-sm font-semibold text-pink-200">Verify your phone</p>
                <p class="mt-1 text-sm text-slate-300">We text a 6-digit code to unlock the full report and dollar impact. No spam—just the playbook.</p>
              </div>
              <form id="verify-form" class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-slate-200" for="verifyPhone">Phone number *</label>
                  <input id="verifyPhone" name="phone" type="tel" placeholder="201-555-0123" class="mt-1 w-full rounded-lg border border-white/10 bg-slate-900 px-4 py-3 text-white placeholder:text-slate-500 focus:border-pink-400 focus:outline-none" />
                </div>
                <button type="submit" class="w-full rounded-lg bg-pink-500 px-4 py-3 text-sm font-semibold uppercase tracking-[0.2em] text-white transition hover:bg-pink-400 focus:outline-none focus:ring-2 focus:ring-pink-300">Text me the code</button>
              </form>
              <form id="verify-code-form" class="hidden space-y-4">
                <div>
                  <label class="block text-sm font-medium text-slate-200" for="verifyCode">Enter the 6-digit code</label>
                  <input id="verifyCode" name="code" type="text" inputmode="numeric" maxlength="6" placeholder="123456" class="mt-1 w-full rounded-lg border border-white/10 bg-slate-900 px-4 py-3 text-white placeholder:text-slate-500 focus:border-pink-400 focus:outline-none" />
                </div>
                <button type="submit" class="w-full rounded-lg bg-green-500 px-4 py-3 text-sm font-semibold uppercase tracking-[0.2em] text-slate-900 transition hover:bg-green-400 focus:outline-none focus:ring-2 focus:ring-green-300">Unlock my report</button>
              </form>
              <p class="hidden text-xs text-amber-300" id="verify-warning"></p>
            </div>

            <div id="grader-result" class="hidden">
              <div class="flex gap-6">
                <!-- Left sticky rail: Score gauge -->
                <div class="w-80 flex-shrink-0">
                  <div class="sticky top-6 space-y-4">
                    <!-- Score gauge -->
                    <div class="rounded-2xl border border-white/10 bg-slate-900/80 p-6 text-center">
                      <div class="relative mx-auto mb-4 h-32 w-32">
                        <!-- Donut gauge background -->
                        <svg class="h-32 w-32 transform -rotate-90" viewBox="0 0 120 120">
                          <circle cx="60" cy="60" r="50" stroke="currentColor" stroke-width="8" fill="none" class="text-slate-700" />
                          <circle id="score-arc" cx="60" cy="60" r="50" stroke="currentColor" stroke-width="8" fill="none" stroke-linecap="round" 
                                  class="text-pink-400 transition-all duration-1000" stroke-dasharray="0 314" />
                        </svg>
                        <div class="absolute inset-0 flex items-center justify-center">
                          <div class="text-center">
                            <div id="score-meter" class="text-3xl font-bold text-white">--</div>
                            <div class="text-xs text-slate-400">/ 100</div>
                          </div>
                        </div>
                      </div>
                      <p id="result-headline" class="text-lg font-semibold text-white mb-4">Your score is loading…</p>
                      
                      <!-- Category breakdown -->
                      <div class="space-y-2 text-sm" id="score-breakdown">
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-2">
                            <div class="h-2 w-2 rounded-full bg-pink-400"></div>
                            <span class="text-slate-300">Search Results</span>
                          </div>
                          <span class="text-white font-medium">--</span>
                        </div>
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-2">
                            <div class="h-2 w-2 rounded-full bg-green-400"></div>
                            <span class="text-slate-300">Website Basics</span>
                          </div>
                          <span class="text-white font-medium">--</span>
                        </div>
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-2">
                            <div class="h-2 w-2 rounded-full bg-blue-400"></div>
                            <span class="text-slate-300">Local Listings</span>
                          </div>
                          <span class="text-white font-medium">--</span>
                        </div>
                      </div>
                    </div>

                    <!-- Primary CTA -->
                    <button class="w-full rounded-xl bg-pink-500 px-6 py-4 text-sm font-semibold text-white transition hover:bg-pink-400 focus:outline-none focus:ring-2 focus:ring-pink-300">
                      Talk to a Hudson County expert
                    </button>
                  </div>
                </div>

                <!-- Right content: Cards with chips -->
                <div class="flex-1 space-y-6">
                  <!-- Problems summary card -->
                  <div class="rounded-2xl border border-white/10 bg-slate-900/80 p-6">
                    <div class="flex items-start gap-4">
                      <div class="flex-shrink-0 rounded-full bg-red-500/20 p-3">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-5 w-5 text-red-400">
                          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                        </svg>
                      </div>
                      <div class="flex-1">
                        <h3 class="text-lg font-semibold text-white mb-2">6 problems are costing you $947/month</h3>
                        <ul class="space-y-1 text-sm text-slate-300">
                          <li class="flex items-center gap-2">
                            <span class="text-red-400">•</span>
                            <span>Website fails to load order button above fold on mobile</span>
                          </li>
                          <li class="flex items-center gap-2">
                            <span class="text-red-400">•</span>
                            <span>Missing from "late night tacos jersey city" searches</span>
                          </li>
                          <li class="flex items-center gap-2">
                            <span class="text-red-400">•</span>
                            <span>No missed-call text-back system detected</span>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  <!-- Competitor ranking card -->
                  <div class="rounded-2xl border border-white/10 bg-slate-900/80 p-6">
                    <h3 class="text-lg font-semibold text-white mb-4">You're ranking below 6 competitors</h3>
                    <div class="space-y-3">
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-3">
                        <div>
                          <p class="font-medium text-white">Orale Mexican Kitchen</p>
                          <p class="text-xs text-slate-400">4.6★ • 3,012 reviews</p>
                        </div>
                        <div class="text-right">
                          <div class="text-sm font-medium text-green-400">#1</div>
                          <div class="text-xs text-slate-500">Map pack</div>
                        </div>
                      </div>
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-3">
                        <div>
                          <p class="font-medium text-white">Taqueria Downtown</p>
                          <p class="text-xs text-slate-400">4.5★ • 2,148 reviews</p>
                        </div>
                        <div class="text-right">
                          <div class="text-sm font-medium text-green-400">#2</div>
                          <div class="text-xs text-slate-500">Map pack</div>
                        </div>
                      </div>
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-3">
                        <div>
                          <p class="font-medium text-white">Los Cuernos Cantina</p>
                          <p class="text-xs text-slate-400">4.4★ • 1,847 reviews</p>
                        </div>
                        <div class="text-right">
                          <div class="text-sm font-medium text-amber-400">#3</div>
                          <div class="text-xs text-slate-500">Map pack</div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Evidence table with chips -->
                  <div class="rounded-2xl border border-white/10 bg-slate-900/80 p-6">
                    <h3 class="text-lg font-semibold text-white mb-4">This is how you're doing online</h3>
                    <div class="space-y-3">
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-4">
                        <div class="flex items-center gap-3">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-slate-400">
                            <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
                          </svg>
                          <span class="text-sm text-slate-300">Best match for "tacos jersey city"</span>
                        </div>
                        <span class="rounded-full bg-red-500/20 px-2 py-1 text-xs font-medium text-red-300">Not ranking</span>
                      </div>
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-4">
                        <div class="flex items-center gap-3">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-slate-400">
                            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" />
                          </svg>
                          <span class="text-sm text-slate-300">Mobile order button visibility</span>
                        </div>
                        <span class="rounded-full bg-red-500/20 px-2 py-1 text-xs font-medium text-red-300">Below fold</span>
                      </div>
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-4">
                        <div class="flex items-center gap-3">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-slate-400">
                            <path d="M3.105 2.289a.75.75 0 00-.826.95l1.414 4.925A1.5 1.5 0 005.135 9.25h6.115a.75.75 0 010 1.5H5.135a1.5 1.5 0 00-1.442 1.086l-1.414 4.926a.75.75 0 00.826.95 28.896 28.896 0 0015.293-7.154.75.75 0 000-1.115A28.896 28.896 0 003.105 2.289z" />
                          </svg>
                          <span class="text-sm text-slate-300">Missed call text-back system</span>
                        </div>
                        <span class="rounded-full bg-red-500/20 px-2 py-1 text-xs font-medium text-red-300">Not detected</span>
                      </div>
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-4">
                        <div class="flex items-center gap-3">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-slate-400">
                            <path fill-rule="evenodd" d="M1 6a3 3 0 013-3h12a3 3 0 013 3v8a3 3 0 01-3 3H4a3 3 0 01-3-3V6zm4 1.5a2 2 0 114 0 2 2 0 01-4 0zm2 3a4 4 0 00-3.665 2.395.75.75 0 00.416 1A8.98 8.98 0 007 14a8.98 8.98 0 003.249-.604.75.75 0 00.416-1A4 4 0 007 10.5zm5-3.25a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75zm0 2.5a.75.75 0 01.75-.75h2.5a.75.75 0 010 1.5h-2.5a.75.75 0 01-.75-.75z" clip-rule="evenodd" />
                          </svg>
                          <span class="text-sm text-slate-300">Google Business Profile photos</span>
                        </div>
                        <span class="rounded-full bg-amber-500/20 px-2 py-1 text-xs font-medium text-amber-300">Needs refresh</span>
                      </div>
                      <div class="flex items-center justify-between rounded-lg border border-white/5 bg-slate-950/50 p-4">
                        <div class="flex items-center gap-3">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-4 w-4 text-slate-400">
                            <path fill-rule="evenodd" d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z" clip-rule="evenodd" />
                          </svg>
                          <span class="text-sm text-slate-300">Recent Google reviews</span>
                        </div>
                        <span class="rounded-full bg-green-500/20 px-2 py-1 text-xs font-medium text-green-300">Active</span>
                      </div>
                    </div>
                  </div>

                  <!-- Expert testimonial -->
                  <div class="rounded-2xl border border-white/10 bg-slate-900/80 p-6">
                    <div class="flex items-start gap-4">
                      <div class="h-12 w-12 flex-shrink-0 overflow-hidden rounded-full bg-gradient-to-br from-pink-500 to-purple-600"></div>
                      <div>
                        <p class="font-semibold text-white">Alyssa Garcia · Arugami Strategy</p>
                        <p class="mt-1 text-sm text-slate-300">"We've run 42 Hudson County audits this summer. The fixes above put tables back in play within 30 days."</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
</div>
          </div>
        </div>
      </div>
    </section>
  </main>
  <Footer />

  <script type="application/json" id="grader-config" set:html={configJson}></script>
  <script type="module">
    console.log('Grader script loading...');
    
    document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing grader...');
    const configEl = document.getElementById('grader-config');
    console.log('Config element:', configEl);
    console.log('Config text content:', configEl ? configEl.textContent : null);
    
    let config = {};
    try {
      config = configEl ? JSON.parse(configEl.textContent) : {};
    } catch (error) {
      console.error('JSON parse error:', error);
      config = { apiBase: '', recaptchaSiteKey: '' };
    }
    
    const FALLBACK_API_BASE = 'https://arugami-website-production.up.railway.app';
    const apiBase = config.apiBase ? config.apiBase.replace(/\/$/, '') : FALLBACK_API_BASE;
    const usingFallbackApi = !config.apiBase;
    const verificationDisabled = Boolean(config.disableVerification);
    console.log('Config loaded:', { apiBase, config });
    console.log('API Base source:', usingFallbackApi ? 'fallback' : 'config');
    console.log('Verification disabled:', verificationDisabled);

    try {
      console.log('Starting DOM element selection...');
      const form = document.getElementById('grader-form');
      console.log('Form found:', !!form);
    const warning = document.getElementById('grader-warning');
    const progressSection = document.getElementById('grader-progress');
    const stepsList = document.getElementById('progress-steps');
    const statusEl = document.getElementById('progress-status');
    const subtitleEl = document.getElementById('progress-subtitle');
    const verifySection = document.getElementById('grader-verify');
    const verifyForm = document.getElementById('verify-form');
    const verifyCodeForm = document.getElementById('verify-code-form');
    const verifyWarning = document.getElementById('verify-warning');
    const resultSection = document.getElementById('grader-result');
    const resultHeadline = document.getElementById('result-headline');
    const resultLink = document.getElementById('result-link');
    const businessInput = document.getElementById('businessName');
    const suggestionContainer = document.getElementById('search-suggestions');
    const suggestionList = document.getElementById('search-suggestion-list');
    console.log('DOM elements found:', { businessInput, suggestionContainer, suggestionList });
    console.log('Business input element:', businessInput);
    
    if (!businessInput) {
      console.error('CRITICAL: businessInput element not found!');
      throw new Error('businessInput element not found');
    }
    const suggestionHint = document.getElementById('suggestion-hint');
    const suggestionStatus = document.getElementById('suggestion-status');
    const searchSpinner = document.getElementById('search-spinner');
    const manualTrigger = document.getElementById('manual-trigger');
    const manualIntake = document.getElementById('manual-intake');
    const cityInput = document.getElementById('city');
    const websiteInput = document.getElementById('website');
    const placeIdInput = document.getElementById('placeId');
    const progressPreviews = document.getElementById('progress-previews');
    const previewCards = progressPreviews ? progressPreviews.querySelectorAll('[data-preview-step]') : [];
    const scoreMeter = document.getElementById('score-meter');
    const scoreBreakdown = document.getElementById('score-breakdown');
    const evidenceTabs = document.querySelectorAll('.evidence-tab');
    const evidencePanels = document.querySelectorAll('[data-evidence-panel]');
    const unlockModal = document.getElementById('unlock-modal');
    const unlockRecaptcha = document.getElementById('unlock-recaptcha');
    const unlockContinue = document.getElementById('unlock-continue');
    
    if (verificationDisabled) {
      verifySection?.classList.add('hidden');
      unlockModal?.classList.add('hidden');
    }

    const stepOrder = ['resolving', 'details', 'competitors', 'performance', 'scoring', 'done'];
    let scanId = null;
    let pollInterval = null;
    let timerInterval = null;
    let lastStatus = null;
    let currentPhone = null;
    let scanStartTime = null;
    let estimatedDuration = 35000; // 35 seconds
    const sampleSuggestions = [
      {
        inputValue: "Ani Ramen Jersey City",
        name: "Ani Ramen Jersey City",
        city: "Jersey City",
        neighborhood: "Downtown",
        withinHudsonCounty: true,
        rating: 4.5,
        ratingsTotal: 1200,
        category: "Japanese Restaurant"
      },
      {
        inputValue: "Taco Bell Hoboken",
        name: "Taco Bell Hoboken", 
        city: "Hoboken",
        neighborhood: "Midtown",
        withinHudsonCounty: true,
        rating: 4.2,
        ratingsTotal: 800,
        category: "Fast Food Restaurant"
      },
      {
        inputValue: "Liberty House Restaurant",
        name: "Liberty House Restaurant",
        city: "Jersey City", 
        neighborhood: "Liberty State Park",
        withinHudsonCounty: true,
        rating: 4.6,
        ratingsTotal: 2100,
        category: "American Restaurant"
      },
      {
        inputValue: "Orale Mexican Kitchen",
        name: "Orale Mexican Kitchen",
        city: "Jersey City",
        neighborhood: "Downtown", 
        withinHudsonCounty: true,
        rating: 4.6,
        ratingsTotal: 3012,
        category: "Mexican Restaurant"
      },
      {
        inputValue: "Los Cuernos Cantina",
        name: "Los Cuernos Cantina",
        city: "Hoboken",
        neighborhood: "Uptown",
        withinHudsonCounty: true,
        rating: 4.4,
        ratingsTotal: 1847,
        category: "Mexican Restaurant"
      }
    ];
    let suggestionTimeout = null;
    let currentSuggestions = [];
    let activeSuggestionIndex = -1;
    let manualMode = false;

    function getInitials(value) {
      if (!value) return '??';
      const words = value.split(/\s+/).filter(Boolean);
      const first = words[0]?.[0] ?? '';
      const second = words.length > 1 ? words[words.length - 1]?.[0] : words[0]?.[1] ?? '';
      return `${first}${second}`.toUpperCase();
    }

    function formatCategory(value) {
      if (!value) return '';
      return value
        .toString()
        .replace(/_/g, ' ')
        .trim()
        .replace(/([a-z])/g, (match) => match.toUpperCase());
    }

    function escapeRegExp(value) {
      return value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    function showSearchSpinner() {
      if (searchSpinner) {
        searchSpinner.classList.remove('hidden');
      }
    }

    function hideSearchSpinner() {
      if (searchSpinner) {
        searchSpinner.classList.add('hidden');
      }
    }

    function updateSuggestionStatus(state) {
      if (!suggestionStatus) return;
      suggestionStatus.classList.remove(
        'bg-pink-500/15',
        'text-pink-200',
        'border-pink-400/40',
        'bg-green-500/15',
        'text-green-200',
        'border-green-400/40',
        'bg-amber-500/10',
        'text-amber-200',
        'border-amber-400/30',
        'bg-slate-800/80',
        'text-slate-200',
        'border-white/10'
      );

      if (state === 'live') {
        suggestionStatus.classList.add('bg-green-500/15', 'text-green-200', 'border-green-400/40');
        suggestionStatus.textContent = 'Live data';
        hideSearchSpinner();
      } else if (state === 'empty') {
        suggestionStatus.classList.add('bg-amber-500/10', 'text-amber-200', 'border-amber-400/30');
        suggestionStatus.textContent = 'No matches';
        hideSearchSpinner();
      } else if (state === 'loading') {
        suggestionStatus.classList.add('bg-slate-800/80', 'text-slate-200', 'border-white/10');
        suggestionStatus.textContent = 'Searching…';
        showSearchSpinner();
      } else {
        suggestionStatus.classList.add('bg-slate-800/80', 'text-slate-200', 'border-white/10');
        suggestionStatus.textContent = 'Type to search';
        hideSearchSpinner();
      }
    }

    updateSuggestionStatus('empty');
    
    // Initialize suggestions on page load - only show when focused
    // Don't show sample suggestions immediately

    function hideSuggestions(preserveStatus = false) {
      if (suggestionContainer) {
        suggestionContainer.classList.add('hidden');
      }
      if (suggestionList) {
        suggestionList.innerHTML = '';
      }
      if (suggestionHint && !preserveStatus) {
        suggestionHint.textContent = 'Start typing to find your exact listing.';
      }
      if (!preserveStatus) {
        updateSuggestionStatus('empty');
      }
      currentSuggestions = [];
      activeSuggestionIndex = -1;
    }

    function applySuggestion(suggestion) {
      if (!suggestion) return;
      if (businessInput) {
        businessInput.value = suggestion.inputValue ?? suggestion.name ?? '';
      }
      if (cityInput && suggestion.city) {
        cityInput.value = suggestion.city;
      }
      if (websiteInput && suggestion.website) {
        websiteInput.value = suggestion.website;
      }
      if (placeIdInput && suggestion.placeId) {
        placeIdInput.value = suggestion.placeId;
      }
      manualMode = false;
      if (manualIntake) {
        manualIntake.open = false;
      }
      if (suggestionHint) {
        suggestionHint.textContent = 'We’ll scan this listing next.';
      }
      updateSuggestionStatus(suggestion.placeId ? 'live' : 'sample');
      setActiveSuggestion(-1);
      if (businessInput) {
        businessInput.focus({ preventScroll: true });
      }
      hideSuggestions(true);
    }

    function renderSuggestions(items, hint, state = 'sample', query = '') {
      console.log('renderSuggestions called', { items, hint, state, query });
      if (!suggestionContainer || !suggestionList) {
        console.log('Missing elements:', { suggestionContainer, suggestionList });
        return;
      }
      currentSuggestions = Array.isArray(items)
        ? items.filter((item) => item && (item.name || item.inputValue))
        : [];
      activeSuggestionIndex = -1;
      suggestionList.innerHTML = '';

      const trimmedQuery = query.trim();
      const highlightRegex = trimmedQuery ? new RegExp(`(${escapeRegExp(trimmedQuery)})`, 'ig') : null;

      if (!currentSuggestions.length) {
        const empty = document.createElement('li');
        empty.className = 'list-none rounded-xl border border-white/5 bg-slate-900/70 px-4 py-4 text-xs text-slate-400 animate-in fade-in duration-200';
        empty.textContent = state === 'loading' ? 'Searching restaurants...' : 'No matches yet. Add details manually below.';
        suggestionList.appendChild(empty);
        suggestionContainer.classList.remove('hidden');
        if (suggestionHint) {
          suggestionHint.textContent = state === 'loading' ? 'Searching listings…' : 'No matches yet—add details manually below.';
        }
        updateSuggestionStatus(state === 'loading' ? 'loading' : 'empty');
        return;
      }

      currentSuggestions.forEach((item, index) => {
        const displayName = item.name ?? item.inputValue ?? '';
        const li = document.createElement('li');
        li.className = 'list-none animate-in fade-in slide-in-from-left-1 duration-200';
        li.style.animationDelay = `${index * 50}ms`;
        
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'group flex w-full items-center gap-3 rounded-lg border border-transparent px-3 py-3 text-left transition-all duration-150 hover:border-pink-400/30 hover:bg-pink-500/5 focus:border-pink-400/50 focus:bg-pink-500/10 focus:outline-none';
        button.dataset.suggestionIndex = String(index);

        // Add simple restaurant icon
        const icon = document.createElement('div');
        icon.className = 'flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-lg bg-slate-800 text-slate-400';
        icon.innerHTML = `
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"/>
          </svg>
        `;
        button.appendChild(icon);

        const content = document.createElement('div');
        content.className = 'flex-1 min-w-0';
        
        const title = document.createElement('p');
        title.className = 'text-sm font-medium text-white truncate';
        if (highlightRegex) {
          const parts = displayName.split(highlightRegex);
          parts.forEach((part, partIndex) => {
            if (!part) return;
            const span = document.createElement('span');
            if (trimmedQuery && partIndex % 2 === 1) {
              span.className = 'text-pink-200 bg-pink-500/20 px-0.5 rounded';
            }
            span.textContent = part;
            title.appendChild(span);
          });
        } else {
          title.textContent = displayName;
        }
        content.appendChild(title);

        // Simple metadata
        const metaPieces = [item.city, item.neighborhood].filter(Boolean);
        if (metaPieces.length) {
          const meta = document.createElement('p');
          meta.className = 'text-xs text-slate-400 mt-1';
          meta.textContent = metaPieces.join(' • ');
          
          // Add Hudson County indicator
          if (item.withinHudsonCounty) {
            const badge = document.createElement('span');
            badge.className = 'ml-2 inline-flex items-center rounded-full bg-green-500/20 px-2 py-0.5 text-xs font-medium text-green-300';
            badge.textContent = 'Hudson County';
            meta.appendChild(badge);
          }
          
          content.appendChild(meta);
        }
        button.appendChild(content);

        const chevron = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        chevron.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        chevron.setAttribute('viewBox', '0 0 20 20');
        chevron.classList.add('h-5', 'w-5', 'text-pink-300', 'transition-transform', 'duration-150', 'group-hover:translate-x-1', 'opacity-60', 'group-hover:opacity-100');
        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.setAttribute('fill-rule', 'evenodd');
        path.setAttribute('clip-rule', 'evenodd');
        path.setAttribute('d', 'M7.293 4.293a1 1 0 011.414 0L13.414 9l-4.707 4.707a1 1 0 01-1.414-1.414L10.586 9 7.293 5.707a1 1 0 010-1.414z');
        chevron.appendChild(path);
        button.appendChild(chevron);

        button.addEventListener('mouseenter', () => setActiveSuggestion(index));
        button.addEventListener('focus', () => setActiveSuggestion(index));
        button.addEventListener('click', () => applySuggestion(item));

        li.appendChild(button);
        suggestionList.appendChild(li);
      });

      if (suggestionHint) {
        suggestionHint.textContent = hint ?? 'Select your restaurant to speed up the scan.';
      }
      updateSuggestionStatus(state);
      suggestionContainer.classList.remove('hidden');
      console.log('Showing suggestions container, hidden class removed');
      setActiveSuggestion(state === 'empty' ? -1 : 0);
      suggestionList.scrollTop = 0;
    }

    function setActiveSuggestion(index) {
      if (!suggestionList) return;
      const buttons = suggestionList.querySelectorAll('[data-suggestion-index]');
      if (!buttons.length) {
        activeSuggestionIndex = -1;
        return;
      }

      if (index < 0) {
        activeSuggestionIndex = -1;
        buttons.forEach((button) => {
          button.classList.remove('border-pink-400/60', 'bg-pink-500/15');
          button.classList.add('border-transparent');
        });
        return;
      }

      const maxIndex = buttons.length - 1;
      const nextIndex = Math.max(0, Math.min(index, maxIndex));
      activeSuggestionIndex = nextIndex;
      buttons.forEach((button, idx) => {
        if (idx === activeSuggestionIndex) {
          button.classList.add('border-pink-400/60', 'bg-pink-500/15');
          button.classList.remove('border-transparent');
        } else {
          button.classList.remove('border-pink-400/60', 'bg-pink-500/15');
          button.classList.add('border-transparent');
        }
      });
    }

    let searchController = null;
    
    async function loadSuggestions(query) {
      const trimmed = query.trim();
      
      // Cancel previous request if still pending
      if (searchController) {
        searchController.abort();
        searchController = null;
      }
      
      if (placeIdInput) {
        placeIdInput.value = '';
      }
      manualMode = false;
      if (manualIntake) {
        manualIntake.open = false;
      }

      if (trimmed.length === 0) {
        renderSuggestions(sampleSuggestions, 'Start typing to find your exact listing.', 'sample', trimmed);
        return;
      }

      if (trimmed.length < 2) {
        renderSuggestions([], 'Keep typing to search restaurants...', 'loading', trimmed);
        return;
      }

      const finalApiBase = apiBase || FALLBACK_API_BASE;
      if (!finalApiBase) {
        const fallback = sampleSuggestions.filter((item) => {
          const label = (item.inputValue ?? item.name ?? '').toLowerCase();
          return label.includes(trimmed.toLowerCase());
        });
        renderSuggestions(fallback.length ? fallback : sampleSuggestions, 'Sample matches', 'sample', trimmed);
        return;
      }

      // Show loading state immediately
      renderSuggestions([], 'Searching restaurants...', 'loading', trimmed);

      try {
        searchController = new AbortController();
        const res = await fetch(`${finalApiBase}/api/places/search?q=${encodeURIComponent(trimmed)}&limit=8`, {
          signal: searchController.signal
        });
        
        if (!res.ok) throw new Error('Suggestion lookup failed');
        const data = await res.json();

        // Sort results to prioritize Hudson County
        let results = Array.isArray(data?.results) ? data.results : [];
        if (results.length > 0) {
          results = results.sort((a, b) => {
            // Hudson County restaurants first
            if (a.withinHudsonCounty && !b.withinHudsonCounty) return -1;
            if (!a.withinHudsonCounty && b.withinHudsonCounty) return 1;
            // Then by rating
            const ratingA = a.rating || 0;
            const ratingB = b.rating || 0;
            return ratingB - ratingA;
          });
        }

        if (results.length) {
          const state = data.fallback ? 'sample' : 'live';
          const hudsonCount = results.filter(r => r.withinHudsonCounty).length;
          const hint = data.fallback 
            ? 'Sample matches' 
            : hudsonCount > 0 
              ? `Found ${hudsonCount} Hudson County restaurant${hudsonCount === 1 ? '' : 's'}`
              : 'Live results from Google Places';
          renderSuggestions(results, hint, state, trimmed);
        } else {
          renderSuggestions([], 'No restaurants found. Try a different search or add details manually.', 'empty', trimmed);
        }
      } catch (error) {
        if (error.name === 'AbortError') {
          return; // Request was cancelled, ignore
        }
        
        console.error('Search error:', error);
        const fallback = sampleSuggestions.filter((item) => {
          const label = (item.inputValue ?? item.name ?? '').toLowerCase();
          return label.includes(trimmed.toLowerCase());
        });
        renderSuggestions(fallback.length ? fallback : sampleSuggestions, 'Using sample data (search unavailable)', 'sample', trimmed);
      } finally {
        searchController = null;
      }
    }

    function activateEvidenceTab(target) {
      if (!target) return;
      evidenceTabs.forEach((btn) => {
        const value = btn.getAttribute('data-evidence-tab');
        const isActive = value === target;
        if (isActive) {
          btn.classList.add('border-pink-400/40', 'bg-pink-500/15', 'text-pink-200');
          btn.classList.remove('border-white/10', 'text-slate-200');
          btn.setAttribute('aria-selected', 'true');
        } else {
          btn.classList.add('border-white/10', 'text-slate-200');
          btn.classList.remove('border-pink-400/40', 'bg-pink-500/15', 'text-pink-200');
          btn.setAttribute('aria-selected', 'false');
        }
      });
      evidencePanels.forEach((panel) => {
        const value = panel.getAttribute('data-evidence-panel');
        panel.classList.toggle('hidden', value !== target);
      });
    }

    evidenceTabs.forEach((btn) => {
      btn.addEventListener('click', () => activateEvidenceTab(btn.getAttribute('data-evidence-tab')));
    });
    if (evidenceTabs.length) {
      activateEvidenceTab('search');
    }

    if (businessInput) {
      console.log('Attaching event listeners to businessInput');
      businessInput.addEventListener('input', (event) => {
        const value = event.target.value ?? '';
        if (suggestionTimeout) {
          clearTimeout(suggestionTimeout);
        }
        manualMode = false;
        setActiveSuggestion(-1);
        
        // Show immediate feedback for short queries
        if (value.trim().length > 0 && value.trim().length < 2) {
          renderSuggestions([], 'Keep typing to search restaurants...', 'loading', value);
        }
        
        // Debounce search with different delays based on query length
        const delay = value.trim().length < 3 ? 300 : 150;
        suggestionTimeout = window.setTimeout(() => loadSuggestions(value), delay);
      });

      businessInput.addEventListener('focus', () => {
        console.log('Input focused');
        const value = businessInput.value ?? '';
        // Always call loadSuggestions - it handles empty input by showing sample suggestions
        loadSuggestions(value);
      });
      businessInput.addEventListener('keydown', (event) => {
        if (event.key === 'ArrowDown' && currentSuggestions.length) {
          event.preventDefault();
          const nextIndex = activeSuggestionIndex >= currentSuggestions.length - 1 || activeSuggestionIndex < 0
            ? 0
            : activeSuggestionIndex + 1;
          setActiveSuggestion(nextIndex);
          return;
        }
        if (event.key === 'ArrowUp' && currentSuggestions.length) {
          event.preventDefault();
          const nextIndex = activeSuggestionIndex <= 0
            ? currentSuggestions.length - 1
            : activeSuggestionIndex - 1;
          setActiveSuggestion(nextIndex);
          return;
        }
        if (event.key === 'Enter') {
          if (!manualMode && currentSuggestions.length && activeSuggestionIndex >= 0) {
            event.preventDefault();
            const selected = currentSuggestions[activeSuggestionIndex];
            if (selected) {
              applySuggestion(selected);
            }
            return;
          }
        }
        if (event.key === 'Escape') {
          hideSuggestions();
        }
      });

      businessInput.addEventListener('change', () => {
        const value = businessInput.value?.trim().toLowerCase() ?? '';
        if (!value) return;
        const match = currentSuggestions.find((item) => (item.inputValue ?? item.name ?? '').toLowerCase() === value)
          ?? sampleSuggestions.find((item) => (item.inputValue ?? item.name ?? '').toLowerCase() === value);
        if (match) {
          applySuggestion(match);
        }
      });
    }

    manualTrigger?.addEventListener('click', () => {
      if (manualIntake) {
        manualIntake.open = true;
        manualIntake.scrollIntoView({ behavior: 'smooth', block: 'center' });
        const manualInput = manualIntake.querySelector('input');
        manualInput?.focus({ preventScroll: true });
      }
      manualMode = true;
      if (placeIdInput) {
        placeIdInput.value = '';
      }
      if (suggestionHint) {
        suggestionHint.textContent = 'Drop your details below and we’ll still guide the scan.';
      }
      hideSuggestions();
    });

    document.addEventListener('click', (event) => {
      if (!suggestionContainer || !businessInput) return;
      const target = event.target;
      if (!(target instanceof Node)) return;
      if (target === businessInput) return;
      if (suggestionContainer.contains(target)) return;
      hideSuggestions();
    });

    manualIntake?.addEventListener('toggle', () => {
      manualMode = manualIntake.open;
      if (manualMode) {
        if (placeIdInput) {
          placeIdInput.value = '';
        }
        hideSuggestions();
      }
    });

    manualIntake?.querySelectorAll('input').forEach((input) => {
      input.addEventListener('input', () => {
        manualMode = true;
        if (placeIdInput) {
          placeIdInput.value = '';
        }
      });
    });

    function toggle(el, show) {
      if (!el) return;
      el.classList.toggle('hidden', !show);
    }

    // Timer functions
    function startScanTimer() {
      const timerEl = document.getElementById('scan-timer');
      if (!timerEl) return;
      
      scanStartTime = Date.now();
      timerInterval = setInterval(() => {
        const elapsed = Date.now() - scanStartTime;
        const remaining = Math.max(0, estimatedDuration - elapsed);
        const seconds = Math.ceil(remaining / 1000);
        
        if (seconds > 0) {
          timerEl.textContent = `~${seconds} seconds remaining`;
        } else {
          timerEl.textContent = 'Finishing up...';
        }
      }, 1000);
    }

    function stopScanTimer() {
      if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
      }
    }

    // Competitor pin functions
    function addCompetitorPin(competitor, index) {
      const pinsContainer = document.getElementById('competitor-pins');
      if (!pinsContainer) return;

      // Create pin element
      const pin = document.createElement('div');
      pin.className = 'absolute transform -translate-x-1/2 -translate-y-full opacity-0 transition-all duration-500';
      pin.style.left = `${20 + (index * 15)}%`;
      pin.style.top = `${30 + (index * 12)}%`;
      
      pin.innerHTML = `
        <div class="flex flex-col items-center">
          <div class="bg-red-500 border-2 border-white rounded-full w-6 h-6 flex items-center justify-center shadow-lg">
            <div class="w-2 h-2 bg-white rounded-full"></div>
          </div>
          <div class="mt-1 bg-slate-900/90 border border-white/20 rounded px-2 py-1 text-xs text-white whitespace-nowrap">
            <div class="font-medium">${competitor.name || 'Competitor'}</div>
            <div class="text-slate-300">${competitor.rating || '4.5'}★ • ${competitor.reviews || '1.2k'} reviews</div>
          </div>
        </div>
      `;

      pinsContainer.appendChild(pin);

      // Animate in after a delay
      setTimeout(() => {
        pin.classList.remove('opacity-0');
        pin.classList.add('opacity-100');
      }, index * 800 + 500);
    }

    // Update scanning query display
    function updateScanningQuery(businessName) {
      const queryEl = document.getElementById('scanning-query');
      if (queryEl && businessName) {
        queryEl.textContent = businessName;
      }
    }

    // Unlock modal functions
    function showUnlockModal() {
      if (verificationDisabled) return;
      if (unlockModal) {
        unlockModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    }

    function hideUnlockModal() {
      if (unlockModal) {
        unlockModal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    }

    // Handle unlock modal interactions
    if (unlockRecaptcha && unlockContinue) {
      unlockRecaptcha.addEventListener('change', () => {
        unlockContinue.disabled = !unlockRecaptcha.checked;
      });

      unlockContinue.addEventListener('click', () => {
        hideUnlockModal();
        toggle(verifySection, true);
      });
    }

    function setStepStatus(step, completed) {
      const item = stepsList?.querySelector(`[data-step="${step}"]`);
      if (!item) return;
      const indicator = item.querySelector('span');
      if (indicator) {
        indicator.classList.toggle('bg-pink-400', completed);
        indicator.classList.toggle('bg-slate-500', !completed);
      }
      item.classList.toggle('border-pink-400', completed);
    }

    function revealPreviews(currentIndex) {
      if (!previewCards || previewCards.length === 0) return;
      previewCards.forEach((card) => {
        const step = card.getAttribute('data-preview-step');
        const stepIndex = stepOrder.indexOf(step ?? '');
        if (stepIndex !== -1 && stepIndex <= currentIndex) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
    }

    function markSteps(status) {
      const currentIndex = stepOrder.indexOf(status);
      stepOrder.forEach((step, index) => {
        setStepStatus(step, index <= currentIndex);
      });
      revealPreviews(currentIndex);
    }

    function describeScore(score) {
      if (score >= 85) return 'Excellent';
      if (score >= 70) return 'Solid';
      if (score >= 50) return 'Needs Work';
      return 'Foundation at Risk';
    }

    function updateStatus(status) {
      const labels = {
        queued: 'Queued — warming up the APIs',
        resolving: 'Finding your Google Business Profile…',
        details: 'Pulling profile details…',
        competitors: 'Comparing top competitors…',
        performance: 'Running PageSpeed Insights…',
        scoring: 'Calculating your score…',
        done: 'Score ready! Verify your phone to unlock it.',
        failed: 'We hit a snag. Our team will reach out.'
      };

      const subtitles = {
        queued: 'We queue your grader and lock in a short-lived token.',
        resolving: 'Matching your restaurant and location across Google APIs.',
        details: 'Checking hours, CTA paths, photos, and menu coverage.',
        competitors: 'Ranking nearby restaurants to benchmark visibility.',
        performance: 'Testing mobile speed, responsiveness, and vitals.',
        scoring: 'Rolling everything into a 0–100 score.',
        done: 'Verify your phone to view the report and dollar impact.',
        failed: 'Our Hudson County team will follow up with next steps.'
      };

      statusEl.textContent = labels[status] ?? 'Working…';
      subtitleEl.textContent = subtitles[status] ?? '';
      markSteps(status);
    }

    async function ensureRecaptchaScript() {
      if (!config.recaptchaSiteKey) return;
      if (window.grecaptcha) return;
      await new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = `https://www.google.com/recaptcha/api.js?render=${config.recaptchaSiteKey}`;
        script.async = true;
        script.onload = resolve;
        script.onerror = () => reject(new Error('Failed to load reCAPTCHA.'));
        document.head.appendChild(script);
      });
    }

    async function getRecaptchaToken(action) {
      if (!config.recaptchaSiteKey) {
        return 'dev-bypass-token';
      }
      await ensureRecaptchaScript();
      return new Promise((resolve, reject) => {
        window.grecaptcha.ready(() => {
          window.grecaptcha
            .execute(config.recaptchaSiteKey, { action })
            .then(resolve)
            .catch(reject);
        });
      });
    }

    async function pollStatus(id) {
      const finalApiBase = apiBase || FALLBACK_API_BASE;
      if (!finalApiBase) return;
      try {
        const res = await fetch(`${finalApiBase}/api/scan/${id}`);
        if (!res.ok) throw new Error('Status request failed');
        const data = await res.json();
        
        if (data.status && data.status !== lastStatus) {
          console.log('Scan status update:', data.status, data);
          lastStatus = data.status;
          markSteps(data.status);
          
          if (data.status === 'done') {
            stopScanTimer();
            if (verificationDisabled) {
              hideUnlockModal();
              toggle(progressSection, false);
              toggle(verifySection, false);
              toggle(resultSection, true);
              resultSection?.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else {
              showUnlockModal();
            }
            if (pollInterval) {
              clearInterval(pollInterval);
              pollInterval = null;
            }
          }
          if (data.status === 'failed') {
            stopScanTimer();
            if (pollInterval) {
              clearInterval(pollInterval);
              pollInterval = null;
            }
          }
        }

        // Add competitor pins when competitors data arrives
        if (Array.isArray(data.competitors) && data.competitors.length) {
          const pinsContainer = document.getElementById('competitor-pins');
          if (pinsContainer && !pinsContainer.hasChildNodes()) {
            data.competitors.forEach((competitor, index) => {
              addCompetitorPin(competitor, index);
            });
          }
        }

        if (typeof data.score === 'number' && data.status === 'done') {
          const label = describeScore(data.score);
          resultHeadline.textContent = `${data.score}/100 — ${label}`;
          if (scoreMeter) {
            scoreMeter.textContent = data.score;
          }
          
          // Animate donut gauge
          const scoreArc = document.getElementById('score-arc');
          if (scoreArc) {
            const circumference = 2 * Math.PI * 50; // radius = 50
            const offset = circumference - (data.score / 100) * circumference;
            scoreArc.style.strokeDasharray = `${circumference} ${circumference}`;
            scoreArc.style.strokeDashoffset = offset;
          }
        }
        
        if (Array.isArray(data.breakdown) && data.breakdown.length && scoreBreakdown) {
          const categories = [
            { key: 'search', label: 'Search Results', color: 'bg-pink-400' },
            { key: 'website', label: 'Website Basics', color: 'bg-green-400' },
            { key: 'listings', label: 'Local Listings', color: 'bg-blue-400' }
          ];
          
          scoreBreakdown.innerHTML = '';
          categories.forEach((category, index) => {
            const item = data.breakdown[index];
            const div = document.createElement('div');
            div.className = 'flex items-center justify-between';
            
            const leftSide = document.createElement('div');
            leftSide.className = 'flex items-center gap-2';
            
            const dot = document.createElement('div');
            dot.className = `h-2 w-2 rounded-full ${category.color}`;
            
            const label = document.createElement('span');
            label.className = 'text-slate-300';
            label.textContent = category.label;
            
            const score = document.createElement('span');
            score.className = 'text-white font-medium';
            score.textContent = item && typeof item.score === 'number' ? item.score.toString() : '--';
            
            leftSide.append(dot, label);
            div.append(leftSide, score);
            scoreBreakdown.appendChild(div);
          });
        }
      } catch (error) {
        console.error(error);
      }
    }

    if (usingFallbackApi) {
      console.log('No API base found, using fallback');
      // Don't show warning or disable form - let it work with fallback
      console.log('API base will use fallback URL:', apiBase);
    } else {
      console.log('API base configured:', apiBase);
    }

    form?.addEventListener('submit', async (event) => {
      console.log('Form submitted!');
      event.preventDefault();
      const finalApiBase = apiBase || FALLBACK_API_BASE;
      if (!finalApiBase) {
        console.log('No API base configured');
        return;
      }
      hideSuggestions(true);
      warning.classList.add('hidden');

      const businessName = businessInput?.value?.trim();
      if (!businessName || businessName.length < 2) {
        warning.textContent = 'Please enter your restaurant name.';
        warning.classList.remove('hidden');
        businessInput?.focus({ preventScroll: true });
        return;
      }

      const formData = new FormData(form);
      const payload = Object.fromEntries(formData.entries());
      let recaptchaToken = null;
      try {
        recaptchaToken = await getRecaptchaToken('grader_start');
      } catch (error) {
        warning.textContent = 'Could not load reCAPTCHA. Please refresh and try again.';
        warning.classList.remove('hidden');
        return;
      }

      payload.recaptchaToken = recaptchaToken;

      try {
        const res = await fetch(`${finalApiBase}/api/scan/start`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(payload)
        });

        if (!res.ok) {
          const error = await res.json().catch(() => ({}));
          warning.textContent = error.error === 'recaptcha_failed' ? 'We could not verify you are human. Reload and try again.' : 'Something went wrong starting your scan. Try again.';
          warning.classList.remove('hidden');
          return;
        }

        const data = await res.json();
        scanId = data.scanId;
        
        // Update scanning query with business name
        const businessName = payload.businessName || 'Your restaurant';
        updateScanningQuery(businessName);
        
        toggle(form, false);
        toggle(progressSection, true);
        
        // Start timer and polling
        startScanTimer();
        markSteps('resolving');

        pollInterval = setInterval(() => pollStatus(scanId), 1000);
        await pollStatus(scanId);
      } catch (error) {
        console.error(error);
        warning.textContent = 'We could not start your scan. Check your connection and try again.';
        warning.classList.remove('hidden');
      }
    });

    if (!verificationDisabled) {
      verifyForm?.addEventListener('submit', async (event) => {
        event.preventDefault();
        const finalApiBase = apiBase || FALLBACK_API_BASE;
        if (!finalApiBase || !scanId) return;
        verifyWarning.classList.add('hidden');

        const formData = new FormData(verifyForm);
        const phone = formData.get('phone');

        try {
          const res = await fetch(`${finalApiBase}/api/verify/start`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ scanId, phone })
          });

          if (!res.ok) {
            verifyWarning.textContent = 'We could not send the code. Double-check the number and try again.';
            verifyWarning.classList.remove('hidden');
            return;
          }

          currentPhone = phone;
          toggle(verifyCodeForm, true);
          verifyForm.querySelector('button')?.setAttribute('disabled', 'true');
        } catch (error) {
          console.error(error);
          verifyWarning.textContent = 'Something went wrong sending the code. Try again in a minute.';
          verifyWarning.classList.remove('hidden');
        }
      });

      verifyCodeForm?.addEventListener('submit', async (event) => {
        event.preventDefault();
        const finalApiBase = apiBase || FALLBACK_API_BASE;
        if (!finalApiBase || !scanId || !currentPhone) return;
        verifyWarning.classList.add('hidden');

        const formData = new FormData(verifyCodeForm);
        const code = formData.get('code');

        try {
          const res = await fetch(`${finalApiBase}/api/verify/check`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ scanId, phone: currentPhone, code })
          });

          if (!res.ok) {
            verifyWarning.textContent = res.status === 401 ? 'Code not recognized. Request a new code and try again.' : 'Verification failed. Try again shortly.';
            verifyWarning.classList.remove('hidden');
            return;
          }

          const data = await res.json();
          resultLink.href = data.reportUrl;
          toggle(resultSection, true);
          toggle(verifySection, false);
          if (pollInterval) {
            clearInterval(pollInterval);
            pollInterval = null;
          }
        } catch (error) {
          console.error(error);
          verifyWarning.textContent = 'Unexpected error unlocking the report. Try again or contact us.';
          verifyWarning.classList.remove('hidden');
        }
      });
    }
    
    } catch (error) {
      console.error('JavaScript error in grader script:', error);
      console.error('Error stack:', error.stack);
    }
    
    }); // End DOMContentLoaded
  </script>
</BaseLayout>
